<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="asap.be.repository.mybatis.ProductMapper">

    <insert id="save" useGeneratedKeys="true" parameterType="PostProductDto">
        INSERT INTO Product_table (pName, price, pCode, pStatus)
        VALUES (#{pName}, #{price}, #{pCode}, 1);

        <selectKey resultType="Long" keyProperty="pId" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="status">
        UPDATE Product_table
        INNER JOIN Stock_table
        ON Product_table.pId = Stock_table.pId AND Stock_table.sId = #{p.sId}
        SET Product_table.pStatus = #{p.pStatus}
        WHERE Product_table.pId = #{p.pId} AND Stock_table.sId = #{p.sId}
    </update>
    
    <update id="name">
        UPDATE Product_table
        INNER JOIN Stock_table
        ON Product_table.pId = Stock_table.pId AND Stock_table.sId = #{p.sId}
        SET Product_table.pName = #{p.pName}
        WHERE Product_table.pId = #{p.pId} AND Stock_table.sId = #{p.sId}
    </update>

    <update id="price">
        UPDATE Product_table
        INNER JOIN Stock_table
        ON Product_table.pId = Stock_table.pId AND Stock_table.sId = #{p.sId}
        SET Product_table.price = #{p.price}
        WHERE Product_table.pId = #{p.pId} AND Stock_table.sId = #{p.sId}
    </update>

    <update id="barcode">
        UPDATE Product_table
        INNER JOIN Stock_table
        ON Product_table.pId = Stock_table.pId AND Stock_table.sId = #{p.sId}
        SET Product_table.pCode = #{p.pCode}
        WHERE Product_table.pId = #{p.pId} AND Stock_table.sId = #{p.sId}
    </update>

    <select id="findById" resultType="EverythingDto">
        SELECT p.pId, p.pName, p.price, p.pCode, p.pStatus,
               s.sId, s.cnt, s.receive_in, s.wId,
               w.wName, w.wLoc
        FROM Product_table AS p
        JOIN Stock_table AS s ON p.pId = s.pId AND s.sId = #{sId}
        JOIN Warehouse_table AS w ON s.wId = w.wId
        WHERE p.pId = #{pId}
    </select>

    <select id="findByName" resultType="EverythingDto">
        SELECT p.pId, p.pName, p.price, p.pCode,
               s.sId, s.cnt, s.receive_in,
               s.wId, w.wName, w.wLoc
        FROM Product_table AS p
        JOIN Stock_table AS s ON p.pId = s.pId
        JOIN Warehouse_table AS w ON s.wId = w.wId
        WHERE p.pName = #{pName}
    </select>

    <select id="findByAll" resultType="EverythingDto">
        SELECT p.pId, p.pName, p.price, p.pCode,
               s.sId, s.cnt, s.receive_in,
               s.wId, w.wName, w.wLoc
        FROM Product_table AS p
        JOIN Stock_table AS s ON p.pId = s.pId
        JOIN Warehouse_table AS w ON s.wId = w.wId
    </select>

    <select id="checkExistence" resultType="java.lang.Boolean">
        SELECT EXISTS(
        SELECT 1 FROM Product_table
        WHERE pName = #{pName} AND wId = #{wId})
    </select>

    <!--  상품명, wId로 존재하는지 조회  -->
    <select id="existProductByNameAndWId" resultType="java.lang.Boolean">
        SELECT EXISTS(
            SELECT 1 FROM Product_table p
            LEFT JOIN Stock_table s ON p.pId = s.pId
            WHERE p.pName = #{pName} AND s.wId = #{wId});
    </select>

</mapper>

<!-- 예시
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item (item_name, price, quantity)
        values (#{itemName}, #{price}, #{quantity})
    </insert>

    <update id="update">
        update item
        set item_name=#{updateParam.itemName},
            price=#{updateParam.price},
            quantity=#{updateParam.quantity}
        where id = #{id}
    </update>

    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%', #{itemName}, '%')
            </if>
            <if test="maxPrice != null">
                and price &lt;= #{maxPrice}
            </if>
        </where>
    </select>
    -->