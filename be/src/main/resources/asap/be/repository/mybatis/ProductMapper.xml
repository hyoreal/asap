<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="asap.be.repository.mybatis.ProductMapper">

    <insert id="insertOrUpdateStock" parameterType="PostProductDto">
        SET @pId = (SELECT pt.pId FROM Product_table AS pt
        WHERE pt.pName = #{p.pName}
        AND pt.price = #{p.price}
        AND pt.pCode = #{p.pCode});

        SELECT * FROM Stock_table
        WHERE pId = @pId AND wId = #{p.wId}
        FOR UPDATE;

        <!--    상품이 존재하는 경우 Stock_table 업데이트    -->
        UPDATE Stock_table
        SET cnt = cnt + #{p.pInsert}, pInsert = #{p.pInsert}, receive_in = NOW()
        WHERE pId = @pId AND wId = #{p.wId}
        AND #{p.pInsert} != 0 AND #{p.pInsert} IS NOT NULL;

        <!--    상품이 존재하지 않는 경우 Product_table, Stock_table insert    -->
        INSERT INTO Product_table (pName, price, pCode, pStatus)
        SELECT #{p.pName}, #{p.price}, #{p.pCode}, 1
        FROM dual
        WHERE NOT EXISTS (
        SELECT 1 FROM Product_table WHERE pId = @pId
        )
        AND #{p.pInsert} != 0 AND #{p.pInsert} IS NOT NULL;

        INSERT INTO Stock_table (pId, wId, cnt, receive_in, pInsert)
        SELECT
        COALESCE((SELECT pId FROM Product_table WHERE pId = @pId), LAST_INSERT_ID()),
        #{p.wId},
        #{p.pInsert},
        NOW(),
        #{p.pInsert}
        FROM dual
        WHERE NOT EXISTS (
        SELECT 1 FROM Stock_table WHERE pId = @pId AND wId = #{p.wId}
        )
        AND #{p.pInsert} != 0 AND #{p.pInsert} IS NOT NULL;

        UPDATE Stock_table
        SET cnt = cnt - #{p.quantity}
        WHERE pId = @pId AND wId = #{p.wId} AND cnt >= #{p.quantity};

        INSERT INTO Release_table (sId, quantity, total, release_at)
        SELECT sId, #{p.quantity}, #{p.quantity} * price, NOW()
        FROM Stock_table, Product_table
        WHERE #{p.quantity} IS NOT NULL AND #{p.quantity} != 0
        AND #{p.quantity} &lt;= Stock_table.cnt
        AND Stock_table.pId = Product_table.pId
        AND Stock_table.pId = @pId
        AND Stock_table.wId = #{p.wId};
    </insert>

    <update id="updateProduct">
        UPDATE Product_table
        SET pName = COALESCE(#{p.pName}, pName),
            price = COALESCE(#{p.price}, price),
            pCode = COALESCE(#{p.pCode}, pCode),
            pStatus = COALESCE(#{p.pStatus}, pStatus)
        WHERE pId = #{p.pId} AND EXISTS (
        SELECT 1 FROM Stock_table WHERE pId = #{p.pId} AND sId = #{p.sId}
        );
    </update>

    <select id="findById" resultType="EverythingDto">
        SELECT p.pId, p.pName, p.price, p.pCode, p.pStatus,
               s.sId, s.cnt, s.receive_in, s.wId,
               w.wName, w.wLoc
        FROM Product_table AS p
        JOIN Stock_table AS s ON p.pId = s.pId AND s.sId = #{sId}
        JOIN Warehouse_table AS w ON s.wId = w.wId
        WHERE p.pId = #{pId}
    </select>

    <select id="findByName" resultType="EverythingDto">
        SELECT p.pId, p.pName, p.price, p.pCode,
               s.sId, s.cnt, s.receive_in,
               s.wId, w.wName, w.wLoc
        FROM Product_table AS p
        JOIN Stock_table AS s ON p.pId = s.pId
        JOIN Warehouse_table AS w ON s.wId = w.wId
        WHERE p.pName = #{pName}
    </select>

    <select id="findByAll" resultType="EverythingDto">
        SELECT p.pId, p.pName, p.price, p.pCode,
               s.sId, s.cnt, s.receive_in,
               s.wId, w.wName, w.wLoc
        FROM Product_table AS p
        JOIN Stock_table AS s ON p.pId = s.pId
        JOIN Warehouse_table AS w ON s.wId = w.wId
    </select>

    <select id="checkExistence" resultType="java.lang.Boolean">
        SELECT EXISTS(
        SELECT 1 FROM Product_table
        WHERE pName = #{pName} AND wId = #{wId})
    </select>
</mapper>

<!-- 예시
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item (item_name, price, quantity)
        values (#{itemName}, #{price}, #{quantity})
    </insert>

    <update id="update">
        update item
        set item_name=#{updateParam.itemName},
            price=#{updateParam.price},
            quantity=#{updateParam.quantity}
        where id = #{id}
    </update>

    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%', #{itemName}, '%')
            </if>
            <if test="maxPrice != null">
                and price &lt;= #{maxPrice}
            </if>
        </where>
    </select>
    -->