<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="asap.be.repository.mybatis.ReleaseMapper">

    <select id="cnt" resultType="Integer">
            SELECT cnt
            FROM Stock_table
            WHERE pId = #{pId};
    </select>

    <update id="release" parameterType="ReleaseStockDto">
            UPDATE Stock_table
            SET cnt = cnt - #{s.quantity}
            WHERE pId = #{s.pId};

            INSERT INTO Release_table (sId, quantity, total, release_at)
            VALUES (#{s.pId}, #{s.quantity},
            (SELECT price * #{s.quantity} FROM Product_table WHERE pId = #{s.pId}), now());

    </update>

    <update id="update">
        UPDATE Stock_table
        SET cnt = cnt + #{s.quantity}, receive_in = now()
        WHERE pId = #{s.pId};
    </update>

    <select id="findAll" resultType="Release">
        SELECT * FROM Release_table ORDER BY release_at DESC
    </select>

    <select id="findReleaseById" resultType="Release">
        SELECT * FROM Release_table WHERE sId = #{sId} ORDER BY release_at DESC
    </select>

    <select id="findStockByPId" resultType="Stock">
        SELECT * FROM Stock_table WHERE pId = #{pId} AND sId = #{sId}
    </select>

    <select id="findStockByPNameAndWId" resultType="EverythingDto">
        SELECT pt.pId, pt.pName, pt.price, pt.pCode, pt.pStatus,
               s.sId, s.cnt, s.receive_in, s.wId,
               w.wName, w.wLoc
        FROM Product_table AS pt
        JOIN Stock_table AS s ON pt.pId = s.pId AND s.wId = #{wId}
        JOIN Warehouse_table AS w ON s.wId = w.wId
        WHERE pt.pName = #{pName}

<!--        SELECT * FROM Stock_table-->
<!--        JOIN Product_table ON Stock_table.pId = Product_table.pId-->
<!--        WHERE Product_table.pName = #{pName} AND Stock_table.wId = #{wId}-->
<!--        -->
<!--        SELECT * FROM Stock_table WHERE pId = (-->
<!--        SELECT pId FROM product_table WHERE pName = #{pName}) AND wId = #{wId}-->
    </select>

    <select id="totalByDates" resultType="MoneyDto">
        SELECT release_at AS releaseat, SUM(total) AS money
        FROM Release_table
        WHERE release_at BETWEEN #{start_date} AND #{end_date}
        GROUP BY release_at
        ORDER BY release_at
    </select>

    <select id="insertCnt" resultType="java.util.Map">
        SELECT DATE_FORMAT(t.date_range, '%Y-%m-%d') AS receive_in, IFNULL(SUM(s.pInsert), 0) AS pInsert
        FROM (
            SELECT ADDDATE(#{start_at}, t4+t16*4+t64*16) AS date_range
            FROM (SELECT 0 t4 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3) t4,
                 (SELECT 0 t16 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3) t16,
                 (SELECT 0 t64 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3) t64
            HAVING date_range BETWEEN #{start_at} AND #{end_at}
        ) t
        LEFT JOIN Stock_table s ON t.date_range = DATE(s.receive_in) AND s.pId = #{pId}
        GROUP BY DATE_FORMAT(t.date_range, '%Y-%m-%d')
        ORDER BY receive_in ASC;
    </select>

    <select id="releaseCnt" resultType="java.util.Map">
        SELECT DATE_FORMAT(t.date_range, '%Y-%m-%d') AS release_at, IFNULL(SUM(r.quantity), 0) AS pRelease
        FROM (
            SELECT ADDDATE(#{start_at}, t4+t16*4+t64*16) AS date_range
            FROM (SELECT 0 t4 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3) t4,
                 (SELECT 0 t16 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3) t16,
                 (SELECT 0 t64 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3) t64
            HAVING date_range BETWEEN #{start_at} AND #{end_at}
        ) t
        LEFT JOIN Release_table r ON t.date_range = DATE(r.release_at) AND r.sId = #{pId}
        GROUP BY DATE_FORMAT(t.date_range, '%Y-%m-%d')
        ORDER BY release_at ASC;
    </select>

    <select id="insertCntRank" resultType="java.util.Map">
        SELECT RANK() OVER (ORDER BY SUM(pInsert) DESC) as ranking,
               (SELECT pName From Product_table WHERE pId = sId) AS pName,
               SUM(pInsert) as insertCnt
        FROM Stock_table
        WHERE receive_in = #{receive_in}
        GROUP BY pName
        ORDER BY insertCnt DESC
        LIMIT 10;
    </select>

    <select id="releaseCntRank" resultType="java.util.Map">
        SELECT RANK() OVER (ORDER BY SUM(quantity) DESC) as ranking,
               (SELECT pName From Product_table WHERE pId = sId) AS pName,
               SUM(quantity) as releaseCnt
        FROM Release_table
        WHERE release_at = #{release_at}
        GROUP BY pName
        ORDER BY releaseCnt DESC
        LIMIT 10;
    </select>

    <resultMap id="yearStatusResult" type="YearStatusDto">
        <result property="month" column="month"/>
        <result property="allQuantity" column="total_cnt"/>
        <result property="allReleaseAt" column="total_quantity"/>
        <result property="allInsert" column="total_pInsert"/>
    </resultMap>
    <select id="getMonthlyStockSummary" resultMap="yearStatusResult">
        SELECT
            m.month,
            COALESCE(s.total_cnt, 0) AS total_cnt,
            COALESCE(s.total_pInsert, 0) AS total_pInsert,
            COALESCE(s.total_quantity, 0) AS total_quantity
        FROM
            (   SELECT 1 AS month
                UNION SELECT 2
                UNION SELECT 3
                UNION SELECT 4
                UNION SELECT 5
                UNION SELECT 6
                UNION SELECT 7
                UNION SELECT 8
                UNION SELECT 9
                UNION SELECT 10
                UNION SELECT 11
                UNION SELECT 12
            ) AS m
                LEFT JOIN (
                SELECT
                    MONTH(s.receive_in) AS month,
                    SUM(s.cnt) AS total_cnt,
                    SUM(s.pInsert) AS total_pInsert,
                    SUM(r.quantity) AS total_quantity
                FROM
                    Stock_table s
                    LEFT JOIN Release_table r ON s.sId = r.sId
                WHERE
                    YEAR(s.receive_in) = #{year} OR YEAR(r.release_at) = #{year}
                GROUP BY
                    MONTH(s.receive_in)
            ) AS s ON m.month = s.month
        ORDER BY
            m.month
    </select>

    <!--  상품이 존재한다면 업데이트  -->
    <update id="updateStock">
        UPDATE Stock_table
        JOIN Product_table ON Stock_table.pId = Product_table.pId
        SET cnt = cnt + #{pInsert}, receive_in = NOW()
        WHERE Product_table.pName = #{pName} AND Stock_table.wId = #{wId}
    </update>

</mapper>
